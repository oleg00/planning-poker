@using PlanningPoker.Data
@using Newtonsoft.Json
@inject IJSRuntime _jsRuntime

@if (!IsUserStateSet && IsUserStateLoaded)
{
    <div class="container container username-container container-reveal min-vw-100">
        <div class="row justify-content-center align-items-center" style="height:100vh">
            <div class="col-4">
                <div class="card">
                    <div class="card-body">
                        <form action="" autocomplete="off">
                            <div class="form-group">
                                <h5 class="form-label">Name</h5>
                                <input type="text" class="form-control" name="username"
                                       @bind="UserName">
                                <h5 class="form-label mt-2">Spectator mode</h5>
                                <input type="checkbox" name="checkbox"
                                       @bind="IsSpectator">
                            </div>
                            <button type="button" id="sendlogin" 
                                    class="btn btn-primary mt-2 @(string.IsNullOrEmpty(UserName) ? "disabled" : "")" 
                                    @onclick="SetUserState">Start</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    
    private bool IsUserStateSet { get; set; }
    private bool IsUserStateLoaded { get; set; } = false;

    public bool IsSpectator;
    public string? UserName;
    
    [Parameter]
    public EventCallback OnUserInputSet { get; set; }

    private async Task SetUserState()
    {
        if (UserName is not null)
        {
            var userState = new UserState()
            {
                UserName = UserName,
                IsSpectator = IsSpectator
            };
            await _jsRuntime.InvokeVoidAsync("hideUserInputView");
            await _jsRuntime.InvokeVoidAsync("storeUserState", JsonConvert.SerializeObject(userState));
            IsUserStateSet = true;
            IsUserStateLoaded = true;
            await OnUserInputSet.InvokeAsync();
        }
    }

    private async Task TryRestoreUserNameAndJoinRoom()
    {
        if (UserName is null)
        {
            var userStateString = await _jsRuntime.InvokeAsync<string>("restoreUserState");
            var userState = JsonConvert.DeserializeObject<UserState>(userStateString ?? string.Empty);
            if (userState != null && !string.IsNullOrWhiteSpace(userState.UserName))
            {
                UserName = userState.UserName;
                IsSpectator = userState.IsSpectator;
                IsUserStateSet = true;
            }
        }
        IsUserStateLoaded = true;
        await SetUserState();
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await _jsRuntime.InvokeVoidAsync("initTooltips");
        
        if (firstRender)
        {
            await TryRestoreUserNameAndJoinRoom();
        }
    }



}